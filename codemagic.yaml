workflows:
  ios-workflow:
    name: iOS Workflow
    max_build_duration: 120
    instance_type: mac_mini_m1
    integrations:
      app_store_connect: codemagic
    environment:
      ios_signing:
        distribution_type: app_store
        bundle_identifier: com.zura.app
        automatic_code_signing: true
      vars:
        BUNDLE_ID: "com.zura.app"
        XCODE_WORKSPACE: "Runner.xcworkspace"
        XCODE_SCHEME: "Runner"
      flutter: stable
      xcode: latest
      cocoapods: default
    scripts:
      - name: Set up code signing settings on Xcode project
        script: |
          xcode-project use-profiles
      
      # CRITICAL: Complete clean build process
      - name: Clean build environment (Fix iOS crashes)
        script: |
          echo "üßπ Starting complete clean build process..."
          
          # Clean Flutter completely
          echo "üîÑ Cleaning Flutter cache..."
          flutter clean
          
          # Remove all iOS build artifacts
          echo "üóëÔ∏è Removing iOS build artifacts..."
          rm -rf ios/Pods
          rm -rf ios/.symlinks
          rm -f ios/Podfile.lock
          rm -f pubspec.lock
          
          # Clean derived data
          echo "üóëÔ∏è Cleaning Xcode derived data..."
          rm -rf ~/Library/Developer/Xcode/DerivedData
          
          echo "‚úÖ Clean environment complete!"
      
      - name: Get Flutter dependencies with clean resolution
        script: |
          echo "üì¶ Getting Flutter dependencies..."
          flutter pub get
          
          echo "üìã Dependency tree check..."
          flutter pub deps
      
      - name: Clean iOS dependencies and reinstall
        script: |
          echo "üçé Setting up iOS dependencies..."
          cd ios
          
          # Deintegrate and reinstall pods completely
          echo "üîÑ Deintegrating existing pods..."
          pod deintegrate
          
          echo "üì¶ Installing fresh pods..."
          pod install --clean-install --verbose
          
          cd ..
          echo "‚úÖ iOS dependencies ready!"
      
      - name: Verify and Fix Firebase configuration
        script: |
          echo "üî• FIREBASE CONFIGURATION AUTO-FIX"
          echo "=================================="
          
          # Step 1: Verify GoogleService-Info.plist exists
          echo "üìã Step 1: Checking for GoogleService-Info.plist..."
          if [ -f "ios/Runner/GoogleService-Info.plist" ]; then
            echo "‚úÖ GoogleService-Info.plist found"
          else
            echo "‚ùå GoogleService-Info.plist missing!"
            echo "üîß Please add GoogleService-Info.plist to ios/Runner/ in your repository"
            exit 1
          fi
          
          # Step 2: Check if already integrated in project.pbxproj
          echo "üîç Step 2: Checking Xcode project integration..."
          if grep -q "GoogleService-Info.plist" ios/Runner.xcodeproj/project.pbxproj; then
            echo "‚úÖ GoogleService-Info.plist already integrated in Xcode project"
          else
            echo "üîß Step 3: Auto-integrating GoogleService-Info.plist into Xcode project..."
            
            # Get the project.pbxproj file
            PBXPROJ_FILE="ios/Runner.xcodeproj/project.pbxproj"
            
            # Generate a unique identifier for the file reference
            FILE_REF_ID=$(openssl rand -hex 12 | tr '[:lower:]' '[:upper:]')
            BUILD_FILE_ID=$(openssl rand -hex 12 | tr '[:lower:]' '[:upper:]')
            
            echo "üìù Adding file reference..."
            # Add file reference (before the /* End PBXFileReference section */ line)
            sed -i.bak "/\/\* End PBXFileReference section \*\//i\\
          \\		${FILE_REF_ID} /* GoogleService-Info.plist */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = text.plist.xml; path = \"GoogleService-Info.plist\"; sourceTree = \"<group>\"; };" "$PBXPROJ_FILE"
            
            echo "üìÅ Adding to Runner group..."
            # Add to Runner group children (find the Runner group and add the file reference)
            sed -i.bak "/children = (/,/);/{
              /Runner\/Info.plist/a\\
          \\				${FILE_REF_ID} /* GoogleService-Info.plist */,
            }" "$PBXPROJ_FILE"
            
            echo "üèóÔ∏è Adding build file..."
            # Add build file reference (before /* End PBXBuildFile section */)
            sed -i.bak "/\/\* End PBXBuildFile section \*\//i\\
          \\		${BUILD_FILE_ID} /* GoogleService-Info.plist in Resources */ = {isa = PBXBuildFile; fileRef = ${FILE_REF_ID} /* GoogleService-Info.plist */; };" "$PBXPROJ_FILE"
            
            echo "üì¶ Adding to Copy Bundle Resources..."
            # Add to Copy Bundle Resources phase
            sed -i.bak "/\/\* Resources \*\/ = {/,/);/{
              /files = (/a\\
          \\				${BUILD_FILE_ID} /* GoogleService-Info.plist in Resources */,
            }" "$PBXPROJ_FILE"
            
            # Clean up backup file
            rm "${PBXPROJ_FILE}.bak" 2>/dev/null || true
            
            echo "‚úÖ GoogleService-Info.plist auto-integrated into Xcode project!"
          fi
          
          # Step 3: Verify integration worked
          echo "üîç Step 4: Verifying integration..."
          if grep -q "GoogleService-Info.plist.*Resources" ios/Runner.xcodeproj/project.pbxproj; then
            echo "‚úÖ Firebase plist properly integrated for bundling"
          else
            echo "‚ö†Ô∏è Integration may need manual verification"
          fi
          
          echo "‚úÖ Firebase configuration check complete!"
      
      - name: Build iOS app with verbose logging
        script: |
          echo "üèóÔ∏è Building iOS app..."
          flutter build ios --release --verbose
      
      - name: Build iOS IPA
        script: |
          echo "üì¶ Creating IPA..."
          xcode-project build-ipa \
            --workspace ios/$XCODE_WORKSPACE \
            --scheme $XCODE_SCHEME
    artifacts:
      - build/ios/ipa/*.ipa
      - /tmp/xcodebuild_logs/*.log
      - flutter_drive.log
    publishing:
      # Automatically submit to App Store Connect
      app_store_connect:
        auth: integration
        
        # Submit to App Store Connect
        submit_to_app_store: false
        
        # Submit to TestFlight
        submit_to_testflight: true
        
        # TestFlight configuration
        beta_groups:
          - App Store Connect Users
        
        # Release notes
        submit_to_testflight: true